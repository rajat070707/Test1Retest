import { __decorate, __metadata } from 'tslib';
import { EventEmitter, Injectable, Input, Output, Component, ChangeDetectionStrategy, Pipe, Directive, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

let AngularPaginatorService = class AngularPaginatorService {
    constructor() {
        /** id is used to identify pagination instances */
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        /** instances is the collection of pagination componetns */
        this.instances = {};
        /** emits an event with instance id whenever the page number changes */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    updateInstance(instance) {
        for (const key in instance) {
            if (instance[key] !== this.instances[instance.id][key]) {
                this.instances[instance.id][key] = instance[key];
                return true;
            }
        }
        return false;
    }
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
};
AngularPaginatorService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], AngularPaginatorService);

/**
 * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
 */
let AngularPaginatorComponent = class AngularPaginatorComponent {
    /**
     *
     * @param angularPaginatorService service for angular paginator
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
        /**
         * Whether to display First / Last buttons
         */
        this.boundaryLinks = false;
        /**
         * Whether to display Previous / Next buttons
         */
        this.directionLinks = true;
        /**
         * Limit number for pagination size, i.e., the maximum page numbers to be displayed
         */
        this.maxSize = 5;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = true;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        /**
         * Text for first button
         */
        this.firstText = 'First';
        /**
         * Text for previous button
         */
        this.previousText = 'Previous';
        /**
         * Text for next button
         */
        this.nextText = 'Next';
        /**
         * Text for last button
         */
        this.lastText = 'Last';
        /**
         * Screen reader text for first button
         */
        this.screenReaderFirstText = 'First';
        /**
         * Screen reader text for previous button
         */
        this.screenReaderPreviousText = 'Previous';
        /**
         * Screen reader text for next button
         */
        this.screenReaderNextText = 'Next';
        /**
         * Screen reader text for lasr button
         */
        this.screenReaderLastText = 'Last';
        /**
         * Screen reader text for page numbers
         */
        this.screenReaderPageText = 'Page';
        /**
         * Screen reader text for current page
         */
        this.screenReaderCurrentPageText = 'You`re on page';
        /**
         * Screen reader text for the pagination component
         */
        this.screenReaderPaginationLabel = 'Pagination';
        /**
         * Hides the pagination component if the items are less than `itemsPerPage`
         */
        this.autoHide = false;
        /**
         * disables pagination component
         */
        this.disabled = false;
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         *
         * This event is originally picked up from `AngularPaginatorDirective`
         */
        this.pageChange = new EventEmitter();
    }
    ngOnInit() {
        // set default id if not provided
        this.id = this.id ? this.id : this.angularPaginatorService.id;
        // set default class if not provided
        this.className = this.className ? this.className : this.angularPaginatorService.id;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "boundaryLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "directionLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "maxSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "rotate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "boundaryLinkNumbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "forceEllipses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AngularPaginatorComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "firstText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "previousText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "nextText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "lastText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderFirstText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderPreviousText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderNextText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderLastText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderPageText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderCurrentPageText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "screenReaderPaginationLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AngularPaginatorComponent.prototype, "className", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "autoHide", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AngularPaginatorComponent.prototype, "disabled", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AngularPaginatorComponent.prototype, "pageChange", void 0);
AngularPaginatorComponent = __decorate([
    Component({
        selector: 'angular-paginator',
        template: "<angularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</angularPaginator>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
    }),
    __metadata("design:paramtypes", [AngularPaginatorService])
], AngularPaginatorComponent);

/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
let AngularPaginatorPipe = class AngularPaginatorPipe {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    transform(array, args) {
        const instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        const start = (instance.currentPage - 1) * instance.itemsPerPage;
        const end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    createInstance(array, args) {
        return {
            id: args.id ? args.id : this.angularPaginatorService.id,
            currentPage: args.currentPage ? args.currentPage : 1,
            itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
            totalItems: array.length
        };
    }
};
AngularPaginatorPipe = __decorate([
    Pipe({
        name: 'angularPaginator'
    }),
    __metadata("design:paramtypes", [AngularPaginatorService])
], AngularPaginatorPipe);

/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
let AngularPaginatorDirective = class AngularPaginatorDirective {
    /**
     *
     * @param angularPaginatorService serivce for angular paginator
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
        this.firstPage = 1;
        this.pages = [];
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this.angularPaginatorService.change.subscribe((id) => {
            if (id === this.id) {
                this.updatePages();
            }
        });
    }
    /**
     * Navigate to prevoius page
     */
    toPreviousPage() {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    }
    /**
     * Navigate to next page
     */
    toNextPage() {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    }
    /**
     * Navigate to first page
     */
    toFirstPage() {
        this.setCurrentPage(this.firstPage);
        return;
    }
    /**
     * Navigate to last page
     */
    toLastPage() {
        this.setCurrentPage(this.lastPage);
        return;
    }
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    setCurrentPage(page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    }
    /**
     * create page object used for template
     *
     * @param number page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    makePage(pageNumber, text, isActive) {
        return {
            number: pageNumber,
            text,
            active: isActive
        };
    }
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    getPages(currentPage, itemsPerPage, totalItems) {
        const pages = [];
        // Default page limits
        const totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = this.maxSize && this.maxSize < totalPages;
        // recompute if maxSize
        if (isMaxSized) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
            const page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                // need ellipsis for all options unless range is too close to beginning
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    const previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        const secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    // add the first page
                    const firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                // need ellipsis for all options unless range is too close to end
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    const nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                        const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    // add the last page
                    const lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    /**
     * Updates the pagination component
     */
    updatePages() {
        const instance = this.angularPaginatorService.getInstance(this.id);
        const correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    }
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    outOfBoundCorrection(instance) {
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * check if there is any instance registered with the id
     */
    isValidId() {
        if (!this.angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    }
    ngOnInit() {
        this.isValidId();
        this.updatePages();
    }
    ngOnDestroy() {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AngularPaginatorDirective.prototype, "boundaryLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AngularPaginatorDirective.prototype, "directionLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AngularPaginatorDirective.prototype, "maxSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AngularPaginatorDirective.prototype, "rotate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AngularPaginatorDirective.prototype, "boundaryLinkNumbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AngularPaginatorDirective.prototype, "forceEllipses", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AngularPaginatorDirective.prototype, "id", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], AngularPaginatorDirective.prototype, "pageChange", void 0);
AngularPaginatorDirective = __decorate([
    Directive({
        selector: 'angularPaginator, [angularPaginator]',
        exportAs: 'angularPaginator'
    }),
    __metadata("design:paramtypes", [AngularPaginatorService])
], AngularPaginatorDirective);

let AngularPaginatorModule = class AngularPaginatorModule {
};
AngularPaginatorModule = __decorate([
    NgModule({
        imports: [
            CommonModule
        ],
        providers: [AngularPaginatorService],
        declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
        exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]
    })
], AngularPaginatorModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AngularPaginatorModule, AngularPaginatorService as ɵa, AngularPaginatorComponent as ɵb, AngularPaginatorPipe as ɵc, AngularPaginatorDirective as ɵd };
//# sourceMappingURL=angular-paginator.js.map
