import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
var AngularPaginatorPipe = /** @class */ (function () {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    function AngularPaginatorPipe(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    AngularPaginatorPipe.prototype.transform = function (array, args) {
        var instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        var start = (instance.currentPage - 1) * instance.itemsPerPage;
        var end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    };
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    AngularPaginatorPipe.prototype.createInstance = function (array, args) {
        return {
            id: args.id ? args.id : this.angularPaginatorService.id,
            currentPage: args.currentPage ? args.currentPage : 1,
            itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
            totalItems: array.length
        };
    };
    AngularPaginatorPipe = tslib_1.__decorate([
        Pipe({
            name: 'angularPaginator'
        }),
        tslib_1.__metadata("design:paramtypes", [AngularPaginatorService])
    ], AngularPaginatorPipe);
    return AngularPaginatorPipe;
}());
export { AngularPaginatorPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGFnaW5hdG9yLyIsInNvdXJjZXMiOlsiYXBwL2FuZ3VsYXItcGFnaW5hdG9yL3BpcGVzL2FuZ3VsYXItcGFnaW5hdG9yLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBR2hGOztHQUVHO0FBS0g7SUFDRTs7O09BR0c7SUFDSCw4QkFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBSSxDQUFDO0lBRXpFOzs7OztPQUtHO0lBQ0gsd0NBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxJQUFVO1FBRTlCLElBQU0sUUFBUSxHQUE2QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RSxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhELHdCQUF3QjtRQUN4QixJQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUNqRSxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFFekQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVqQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCw2Q0FBYyxHQUFkLFVBQWUsS0FBVSxFQUFFLElBQVM7UUFDbEMsT0FBTztZQUNMLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFBRTtZQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RCxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDekIsQ0FBQztJQUNKLENBQUM7SUF6Q1Usb0JBQW9CO1FBSmhDLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxrQkFBa0I7U0FDekIsQ0FBQztpREFPNkMsdUJBQXVCO09BTHpELG9CQUFvQixDQTBDaEM7SUFBRCwyQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UgfSBmcm9tICcuLi9vdGhlcnMvYW5ndWxhci1wYWdpbmF0b3IuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBQYWdpbmF0aW9uIFBpcGUgd2hpY2ggcGFnaW5hdGVzIHRoZSBhcnJheSBmb3IgdGhlIHByb3ZpZGVkIGFyZ3VtZW50cyBzdWNoIGFzIGBpdGVtc1BlclBhZ2VgIGFuZCBgY3VycmVudFBhZ2VgXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ2FuZ3VsYXJQYWdpbmF0b3InXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhclBhZ2luYXRvclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhbmd1bGFyUGFnaW5hdG9yU2VydmljZSBzZXJ2aWNlIGZvciBhbmd1bGFyIHBhZ2lhbnRvclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhbmd1bGFyUGFnaW5hdG9yU2VydmljZTogQW5ndWxhclBhZ2luYXRvclNlcnZpY2UpIHsgfVxuXG4gIC8qKlxuICAgKiB0aGlzIHBpcGVzIHBhZ2luYXRlcyB0aGUgYXJyYXkgZm9yIHRoZSBwcm92aWRlZCBhcmd1bWVudHMgc3VjaCBhcyBgaXRlbXNQZXJQYWdlYCBhbmQgYGN1cnJlbnRQYWdlYFxuICAgKlxuICAgKiBAcGFyYW0gYXJyYXkgaW5wdXQgYXJyYXkgZm9yIHdoaWNoIHRoZSBtYW5pcHVsYXRpb24gaGFwcGVuc1xuICAgKiBAcGFyYW0gYXJncyBpbnB1dCBhcmd1bWVudHMgZm9yIHRoZSBwYWdpbmF0b3IgcGlwZVxuICAgKi9cbiAgdHJhbnNmb3JtKGFycmF5OiBhbnksIGFyZ3M/OiBhbnkpOiBhbnkge1xuXG4gICAgY29uc3QgaW5zdGFuY2U6IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSA9IHRoaXMuY3JlYXRlSW5zdGFuY2UoYXJyYXksIGFyZ3MpO1xuXG4gICAgLy8gY3JlYXRlIHBhZ2luYXRpb24gaW5mb3JtYXRpb25cbiAgICB0aGlzLmFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlLnJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2UpO1xuXG4gICAgLy8gc2V0IHRoZSBzbGljaW5nIHJhbmdlXG4gICAgY29uc3Qgc3RhcnQgPSAoaW5zdGFuY2UuY3VycmVudFBhZ2UgLSAxKSAqIGluc3RhbmNlLml0ZW1zUGVyUGFnZTtcbiAgICBjb25zdCBlbmQgPSBpbnN0YW5jZS5jdXJyZW50UGFnZSAqIGluc3RhbmNlLml0ZW1zUGVyUGFnZTtcblxuICAgIHJldHVybiBhcnJheS5zbGljZShzdGFydCwgZW5kKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZSBhbiBpbnN0YW5jZSBmb3IgZWFjaCBwaXBlXG4gICAqXG4gICAqIEBwYXJhbSBhcnJheSBpbnB1dCBhcnJheSBmb3Igd2hpY2ggdGhlIG1hbmlwdWxhdGlvbiBoYXBwZW5zXG4gICAqIEBwYXJhbSBhcmdzIGlucHV0IGFyZ3VtZW50cyBmb3IgdGhlIHBhZ2luYXRvciBwaXBlXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZShhcnJheTogYW55LCBhcmdzOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYXJncy5pZCA/IGFyZ3MuaWQgOiB0aGlzLmFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlLmlkLFxuICAgICAgY3VycmVudFBhZ2U6IGFyZ3MuY3VycmVudFBhZ2UgPyBhcmdzLmN1cnJlbnRQYWdlIDogMSxcbiAgICAgIGl0ZW1zUGVyUGFnZTogYXJncy5pdGVtc1BlclBhZ2UgPyBhcmdzLml0ZW1zUGVyUGFnZSA6IDEwLFxuICAgICAgdG90YWxJdGVtczogYXJyYXkubGVuZ3RoXG4gICAgfTtcbiAgfVxufVxuIl19