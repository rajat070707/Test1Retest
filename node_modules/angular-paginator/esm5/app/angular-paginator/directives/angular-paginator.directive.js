import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
var AngularPaginatorDirective = /** @class */ (function () {
    /**
     *
     * @param angularPaginatorService serivce for angular paginator
     */
    function AngularPaginatorDirective(angularPaginatorService) {
        var _this = this;
        this.angularPaginatorService = angularPaginatorService;
        this.firstPage = 1;
        this.pages = [];
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this.angularPaginatorService.change.subscribe(function (id) {
            if (id === _this.id) {
                _this.updatePages();
            }
        });
    }
    /**
     * Navigate to prevoius page
     */
    AngularPaginatorDirective.prototype.toPreviousPage = function () {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    };
    /**
     * Navigate to next page
     */
    AngularPaginatorDirective.prototype.toNextPage = function () {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    };
    /**
     * Navigate to first page
     */
    AngularPaginatorDirective.prototype.toFirstPage = function () {
        this.setCurrentPage(this.firstPage);
        return;
    };
    /**
     * Navigate to last page
     */
    AngularPaginatorDirective.prototype.toLastPage = function () {
        this.setCurrentPage(this.lastPage);
        return;
    };
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    AngularPaginatorDirective.prototype.setCurrentPage = function (page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    };
    /**
     * create page object used for template
     *
     * @param number page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    AngularPaginatorDirective.prototype.makePage = function (pageNumber, text, isActive) {
        return {
            number: pageNumber,
            text: text,
            active: isActive
        };
    };
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    AngularPaginatorDirective.prototype.getPages = function (currentPage, itemsPerPage, totalItems) {
        var pages = [];
        // Default page limits
        var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        var startPage = 1;
        var endPage = totalPages;
        var isMaxSized = this.maxSize && this.maxSize < totalPages;
        // recompute if maxSize
        if (isMaxSized) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (var pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
            var page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                // need ellipsis for all options unless range is too close to beginning
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    var previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        var secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    // add the first page
                    var firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                // need ellipsis for all options unless range is too close to end
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    var nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                        var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    // add the last page
                    var lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    };
    /**
     * Updates the pagination component
     */
    AngularPaginatorDirective.prototype.updatePages = function () {
        var instance = this.angularPaginatorService.getInstance(this.id);
        var correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    };
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    AngularPaginatorDirective.prototype.outOfBoundCorrection = function (instance) {
        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    };
    /**
     * check if there is any instance registered with the id
     */
    AngularPaginatorDirective.prototype.isValidId = function () {
        if (!this.angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    };
    AngularPaginatorDirective.prototype.ngOnInit = function () {
        this.isValidId();
        this.updatePages();
    };
    AngularPaginatorDirective.prototype.ngOnDestroy = function () {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AngularPaginatorDirective.prototype, "boundaryLinks", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AngularPaginatorDirective.prototype, "directionLinks", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AngularPaginatorDirective.prototype, "maxSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AngularPaginatorDirective.prototype, "rotate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AngularPaginatorDirective.prototype, "boundaryLinkNumbers", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AngularPaginatorDirective.prototype, "forceEllipses", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AngularPaginatorDirective.prototype, "id", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], AngularPaginatorDirective.prototype, "pageChange", void 0);
    AngularPaginatorDirective = tslib_1.__decorate([
        Directive({
            selector: 'angularPaginator, [angularPaginator]',
            exportAs: 'angularPaginator'
        }),
        tslib_1.__metadata("design:paramtypes", [AngularPaginatorService])
    ], AngularPaginatorDirective);
    return AngularPaginatorDirective;
}());
export { AngularPaginatorDirective };
//# sourceMappingURL=data:application/json;base64,