{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://angular-paginator/app/angular-paginator/services/angular-paginator.service.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.component.ts","ng://angular-paginator/app/angular-paginator/pipes/angular-paginator.pipe.ts","ng://angular-paginator/app/angular-paginator/directives/angular-paginator.directive.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","AngularPaginatorService","this","id","instances","change","EventEmitter","prototype","registerInstance","instance","updateInstance","emit","getInstance","getCurrentPage","currentPage","Injectable","AngularPaginatorComponent","angularPaginatorService","boundaryLinks","directionLinks","maxSize","rotate","boundaryLinkNumbers","forceEllipses","firstText","previousText","nextText","lastText","screenReaderFirstText","screenReaderPreviousText","screenReaderNextText","screenReaderLastText","screenReaderPageText","screenReaderCurrentPageText","screenReaderPaginationLabel","autoHide","disabled","pageChange","ngOnInit","className","tslib_1.__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","AngularPaginatorPipe","transform","array","args","createInstance","start","itemsPerPage","end","slice","totalItems","Pipe","name","AngularPaginatorDirective","_this","firstPage","pages","subscription","subscribe","updatePages","toPreviousPage","setCurrentPage","toNextPage","lastPage","toFirstPage","toLastPage","page","makePage","pageNumber","text","isActive","number","active","getPages","totalPages","Math","ceil","startPage","endPage","isMaxSized","max","floor","min","push","previousPageSet","unshift","secondPageLink","firstPageLink","nextPageSet","secondToLastPageLink","lastPageLink","correctedCurrentPage","outOfBoundCorrection","isValidId","Error","ngOnDestroy","unsubscribe","Directive","exportAs","AngularPaginatorModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: any = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n\n    for (const key in instance) {\n      if (instance[key] !== this.instances[instance.id][key]) {\n        this.instances[instance.id][key] = instance[key];\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): any {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n/**\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\n */\n@Component({\n  selector: 'angular-paginator',\n  templateUrl: './angular-paginator.component.html',\n  styleUrls: ['./angular-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AngularPaginatorComponent implements OnInit {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks = false;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks = true;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize = 5;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = true;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers = false;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n  /**\n   * Text for first button\n   */\n  @Input() firstText = 'First';\n  /**\n   * Text for previous button\n   */\n  @Input() previousText = 'Previous';\n  /**\n   * Text for next button\n   */\n  @Input() nextText = 'Next';\n  /**\n   * Text for last button\n   */\n  @Input() lastText = 'Last';\n  /**\n   * Screen reader text for first button\n   */\n  @Input() screenReaderFirstText = 'First';\n  /**\n   * Screen reader text for previous button\n   */\n  @Input() screenReaderPreviousText = 'Previous';\n  /**\n   * Screen reader text for next button\n   */\n  @Input() screenReaderNextText = 'Next';\n  /**\n   * Screen reader text for lasr button\n   */\n  @Input() screenReaderLastText = 'Last';\n  /**\n   * Screen reader text for page numbers\n   */\n  @Input() screenReaderPageText = 'Page';\n  /**\n   * Screen reader text for current page\n   */\n  @Input() screenReaderCurrentPageText = 'You`re on page';\n  /**\n   * Screen reader text for the pagination component\n   */\n  @Input() screenReaderPaginationLabel = 'Pagination';\n  /**\n   * Adds custom class to the pagination element\n   */\n  @Input() className: string;\n  /**\n   * Hides the pagination component if the items are less than `itemsPerPage`\n   */\n  @Input() autoHide = false;\n  /**\n   * disables pagination component\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   *\n   * This event is originally picked up from `AngularPaginatorDirective`\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   *\n   * @param angularPaginatorService service for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  ngOnInit() {\n\n    // set default id if not provided\n    this.id = this.id ? this.id : this.angularPaginatorService.id;\n\n    // set default class if not provided\n    this.className = this.className ? this.className : this.angularPaginatorService.id;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator'\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param angularPaginatorService service for angular pagiantor\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform(array: any, args?: any): any {\n\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this.angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: any, args: any): any {\n    return {\n      id: args.id ? args.id : this.angularPaginatorService.id,\n      currentPage: args.currentPage ? args.currentPage : 1,\n      itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,\n      totalItems: array.length\n    };\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subscription } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'angularPaginator, [angularPaginator]',\n  exportAs: 'angularPaginator'\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks: boolean;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks: boolean;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize: number;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate: boolean;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers: boolean;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses: boolean;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n\n  currentPage: number;\n  firstPage = 1;\n  lastPage: number;\n  pages: Page[] = [];\n\n  private subscription: Subscription;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param angularPaginatorService serivce for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) {\n\n    // subscribe to changes\n    this.subscription = this.angularPaginatorService.change.subscribe((id: string) => {\n      if (id === this.id) {\n        this.updatePages();\n      }\n    });\n\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setCurrentPage(this.currentPage - 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setCurrentPage(this.currentPage + 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setCurrentPage(this.firstPage);\n    return;\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setCurrentPage(this.lastPage);\n    return;\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n    return;\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param number page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  makePage(pageNumber: number, text: any, isActive: boolean): any {\n    return {\n      number: pageNumber,\n      text,\n      active: isActive\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\n    const pages: any = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n\n      if (this.rotate) {\n\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {\n      const page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n\n        // need ellipsis for all options unless range is too close to beginning\n        if (!this.boundaryLinkNumbers || startPage > 3) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n\n        // need ellipsis for all options unless range is too close to end\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  updatePages(): void {\n    const instance: AngularPaginatorInstance = this.angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {\n      this.setCurrentPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n\n    return;\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n\n    if (!this.angularPaginatorService.getInstance(this.id)) {\n      throw new Error('There is no instance registered with id `' + this.id + '`');\n    }\n\n    return;\n  }\n\n  ngOnInit() {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy() {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularPaginatorComponent } from './angular-paginator.component';\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]\n})\n\nexport class AngularPaginatorModule { }\n"]}