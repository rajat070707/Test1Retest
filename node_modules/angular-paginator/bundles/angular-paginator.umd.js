(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-paginator', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['angular-paginator'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var AngularPaginatorService = /** @class */ (function () {
        function AngularPaginatorService() {
            /** id is used to identify pagination instances */
            this.id = 'ANGULAR_PAGINATOR_DEFAULT';
            /** instances is the collection of pagination componetns */
            this.instances = {};
            /** emits an event with instance id whenever the page number changes */
            this.change = new core.EventEmitter();
        }
        /**
         * creates an instance for every pipe differentiated with id
         *
         * @param instance each instance refers to a unique pagination component
         */
        AngularPaginatorService.prototype.registerInstance = function (instance) {
            if (!this.instances[instance.id]) {
                this.instances[instance.id] = instance;
                this.change.emit(instance.id);
            }
            else {
                var changed = this.updateInstance(instance);
                if (changed) {
                    this.change.emit(instance.id);
                }
            }
            return;
        };
        /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param instance an unique pagination component
         */
        AngularPaginatorService.prototype.updateInstance = function (instance) {
            for (var key in instance) {
                if (instance[key] !== this.instances[instance.id][key]) {
                    this.instances[instance.id][key] = instance[key];
                    return true;
                }
            }
            return false;
        };
        /**
         * return instance with given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getInstance = function (id) {
            return this.instances[id];
        };
        /**
         * return currentPage for given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getCurrentPage = function (id) {
            return this.instances[id].currentPage;
        };
        AngularPaginatorService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], AngularPaginatorService);
        return AngularPaginatorService;
    }());

    /**
     * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
     */
    var AngularPaginatorComponent = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService service for angular paginator
         */
        function AngularPaginatorComponent(angularPaginatorService) {
            this.angularPaginatorService = angularPaginatorService;
            /**
             * Whether to display First / Last buttons
             */
            this.boundaryLinks = false;
            /**
             * Whether to display Previous / Next buttons
             */
            this.directionLinks = true;
            /**
             * Limit number for pagination size, i.e., the maximum page numbers to be displayed
             */
            this.maxSize = 5;
            /**
             * Whether to keep current page in the middle of the visible ones
             */
            this.rotate = true;
            /**
             * Whether to always display the first and last page numbers.
             * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
             * in-between as necessary. NOTE: max-size refers to the center of the range.
             * This option may add up to 2 more numbers on each side of the displayed range for the end value and
             * what would be an ellipsis but is replaced by a number because it is sequential
             */
            this.boundaryLinkNumbers = false;
            /**
             * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
             */
            this.forceEllipses = false;
            /**
             * Text for first button
             */
            this.firstText = 'First';
            /**
             * Text for previous button
             */
            this.previousText = 'Previous';
            /**
             * Text for next button
             */
            this.nextText = 'Next';
            /**
             * Text for last button
             */
            this.lastText = 'Last';
            /**
             * Screen reader text for first button
             */
            this.screenReaderFirstText = 'First';
            /**
             * Screen reader text for previous button
             */
            this.screenReaderPreviousText = 'Previous';
            /**
             * Screen reader text for next button
             */
            this.screenReaderNextText = 'Next';
            /**
             * Screen reader text for lasr button
             */
            this.screenReaderLastText = 'Last';
            /**
             * Screen reader text for page numbers
             */
            this.screenReaderPageText = 'Page';
            /**
             * Screen reader text for current page
             */
            this.screenReaderCurrentPageText = 'You`re on page';
            /**
             * Screen reader text for the pagination component
             */
            this.screenReaderPaginationLabel = 'Pagination';
            /**
             * Hides the pagination component if the items are less than `itemsPerPage`
             */
            this.autoHide = false;
            /**
             * disables pagination component
             */
            this.disabled = false;
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             *
             * This event is originally picked up from `AngularPaginatorDirective`
             */
            this.pageChange = new core.EventEmitter();
        }
        AngularPaginatorComponent.prototype.ngOnInit = function () {
            // set default id if not provided
            this.id = this.id ? this.id : this.angularPaginatorService.id;
            // set default class if not provided
            this.className = this.className ? this.className : this.angularPaginatorService.id;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "boundaryLinks", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "directionLinks", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "maxSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "rotate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "boundaryLinkNumbers", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "forceEllipses", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AngularPaginatorComponent.prototype, "id", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "firstText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "previousText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "nextText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "lastText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderFirstText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderPreviousText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderNextText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderLastText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderPageText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderCurrentPageText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "screenReaderPaginationLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AngularPaginatorComponent.prototype, "className", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "autoHide", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AngularPaginatorComponent.prototype, "disabled", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AngularPaginatorComponent.prototype, "pageChange", void 0);
        AngularPaginatorComponent = __decorate([
            core.Component({
                selector: 'angular-paginator',
                template: "<angularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</angularPaginator>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
            }),
            __metadata("design:paramtypes", [AngularPaginatorService])
        ], AngularPaginatorComponent);
        return AngularPaginatorComponent;
    }());

    /**
     * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     */
    var AngularPaginatorPipe = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService service for angular pagiantor
         */
        function AngularPaginatorPipe(angularPaginatorService) {
            this.angularPaginatorService = angularPaginatorService;
        }
        /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.transform = function (array, args) {
            var instance = this.createInstance(array, args);
            // create pagination information
            this.angularPaginatorService.registerInstance(instance);
            // set the slicing range
            var start = (instance.currentPage - 1) * instance.itemsPerPage;
            var end = instance.currentPage * instance.itemsPerPage;
            return array.slice(start, end);
        };
        /**
         * create an instance for each pipe
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.createInstance = function (array, args) {
            return {
                id: args.id ? args.id : this.angularPaginatorService.id,
                currentPage: args.currentPage ? args.currentPage : 1,
                itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
                totalItems: array.length
            };
        };
        AngularPaginatorPipe = __decorate([
            core.Pipe({
                name: 'angularPaginator'
            }),
            __metadata("design:paramtypes", [AngularPaginatorService])
        ], AngularPaginatorPipe);
        return AngularPaginatorPipe;
    }());

    /**
     * This is the directive where the actual pagination takes place, it provides a sync between the
     * pipes and the pagination component
     */
    var AngularPaginatorDirective = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService serivce for angular paginator
         */
        function AngularPaginatorDirective(angularPaginatorService) {
            var _this = this;
            this.angularPaginatorService = angularPaginatorService;
            this.firstPage = 1;
            this.pages = [];
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             */
            this.pageChange = new core.EventEmitter(true);
            // subscribe to changes
            this.subscription = this.angularPaginatorService.change.subscribe(function (id) {
                if (id === _this.id) {
                    _this.updatePages();
                }
            });
        }
        /**
         * Navigate to prevoius page
         */
        AngularPaginatorDirective.prototype.toPreviousPage = function () {
            if (this.currentPage > this.firstPage) {
                this.setCurrentPage(this.currentPage - 1);
            }
            return;
        };
        /**
         * Navigate to next page
         */
        AngularPaginatorDirective.prototype.toNextPage = function () {
            if (this.currentPage < this.lastPage) {
                this.setCurrentPage(this.currentPage + 1);
            }
            return;
        };
        /**
         * Navigate to first page
         */
        AngularPaginatorDirective.prototype.toFirstPage = function () {
            this.setCurrentPage(this.firstPage);
            return;
        };
        /**
         * Navigate to last page
         */
        AngularPaginatorDirective.prototype.toLastPage = function () {
            this.setCurrentPage(this.lastPage);
            return;
        };
        /**
         * Sets current page
         *
         * @param page page number to set as currentPage
         */
        AngularPaginatorDirective.prototype.setCurrentPage = function (page) {
            if (page && this.currentPage !== page) {
                this.currentPage = page;
                this.pageChange.emit(page);
            }
            return;
        };
        /**
         * create page object used for template
         *
         * @param number page number
         * @param text page number, text to be displayed
         * @param isActive whether the page is active or not, true for currentPage
         */
        AngularPaginatorDirective.prototype.makePage = function (pageNumber, text, isActive) {
            return {
                number: pageNumber,
                text: text,
                active: isActive
            };
        };
        /**
         *  create page array
         *
         * @param currentPage current page number
         * @param itemsPerPage total items per page
         * @param totalItems no of items for pagination, usually array length
         */
        AngularPaginatorDirective.prototype.getPages = function (currentPage, itemsPerPage, totalItems) {
            var pages = [];
            // Default page limits
            var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
            var startPage = 1;
            var endPage = totalPages;
            var isMaxSized = this.maxSize && this.maxSize < totalPages;
            // recompute if maxSize
            if (isMaxSized) {
                if (this.rotate) {
                    // current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                    endPage = startPage + this.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - this.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                    // adjust last page if limit is exceeded
                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                }
            }
            // add page number links
            for (var pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
                var page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);
                pages.push(page);
            }
            // add links to move between page sets
            if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
                if (startPage > 1) {
                    // need ellipsis for all options unless range is too close to beginning
                    if (!this.boundaryLinkNumbers || startPage > 3) {
                        var previousPageSet = this.makePage(startPage - 1, '...', false);
                        pages.unshift(previousPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                            var secondPageLink = this.makePage(2, '2', false);
                            pages.unshift(secondPageLink);
                        }
                        // add the first page
                        var firstPageLink = this.makePage(1, '1', false);
                        pages.unshift(firstPageLink);
                    }
                }
                if (endPage < totalPages) {
                    // need ellipsis for all options unless range is too close to end
                    if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                        var nextPageSet = this.makePage(endPage + 1, '...', false);
                        pages.push(nextPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                            var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                            pages.push(secondToLastPageLink);
                        }
                        // add the last page
                        var lastPageLink = this.makePage(totalPages, totalPages, false);
                        pages.push(lastPageLink);
                    }
                }
            }
            return pages;
        };
        /**
         * Updates the pagination component
         */
        AngularPaginatorDirective.prototype.updatePages = function () {
            var instance = this.angularPaginatorService.getInstance(this.id);
            var correctedCurrentPage = this.outOfBoundCorrection(instance);
            if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
                this.setCurrentPage(correctedCurrentPage);
            }
            this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
            return;
        };
        /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param instance instance for which the range is to be corrected
         */
        AngularPaginatorDirective.prototype.outOfBoundCorrection = function (instance) {
            var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (totalPages < instance.currentPage && 0 < totalPages) {
                return totalPages;
            }
            else if (instance.currentPage < 1) {
                return 1;
            }
            return instance.currentPage;
        };
        /**
         * check if there is any instance registered with the id
         */
        AngularPaginatorDirective.prototype.isValidId = function () {
            if (!this.angularPaginatorService.getInstance(this.id)) {
                throw new Error('There is no instance registered with id `' + this.id + '`');
            }
            return;
        };
        AngularPaginatorDirective.prototype.ngOnInit = function () {
            this.isValidId();
            this.updatePages();
        };
        AngularPaginatorDirective.prototype.ngOnDestroy = function () {
            /** destroy the subscription when the directive is destroyed */
            this.subscription.unsubscribe();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AngularPaginatorDirective.prototype, "boundaryLinks", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AngularPaginatorDirective.prototype, "directionLinks", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], AngularPaginatorDirective.prototype, "maxSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AngularPaginatorDirective.prototype, "rotate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AngularPaginatorDirective.prototype, "boundaryLinkNumbers", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AngularPaginatorDirective.prototype, "forceEllipses", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AngularPaginatorDirective.prototype, "id", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], AngularPaginatorDirective.prototype, "pageChange", void 0);
        AngularPaginatorDirective = __decorate([
            core.Directive({
                selector: 'angularPaginator, [angularPaginator]',
                exportAs: 'angularPaginator'
            }),
            __metadata("design:paramtypes", [AngularPaginatorService])
        ], AngularPaginatorDirective);
        return AngularPaginatorDirective;
    }());

    var AngularPaginatorModule = /** @class */ (function () {
        function AngularPaginatorModule() {
        }
        AngularPaginatorModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                providers: [AngularPaginatorService],
                declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
                exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]
            })
        ], AngularPaginatorModule);
        return AngularPaginatorModule;
    }());

    exports.AngularPaginatorModule = AngularPaginatorModule;
    exports.ɵa = AngularPaginatorService;
    exports.ɵb = AngularPaginatorComponent;
    exports.ɵc = AngularPaginatorPipe;
    exports.ɵd = AngularPaginatorDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-paginator.umd.js.map
