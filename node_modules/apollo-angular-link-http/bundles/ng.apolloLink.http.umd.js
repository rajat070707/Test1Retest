(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('apollo-link'), require('graphql/language/printer'), require('apollo-angular-link-http-common'), require('extract-files')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-link-http', ['exports', '@angular/core', '@angular/common/http', 'apollo-link', 'graphql/language/printer', 'apollo-angular-link-http-common', 'extract-files'], factory) :
    (global = global || self, factory(global['ng.apolloLink.http'] = {}, global.ng.core, global.ng.common.http, global.apolloLink.core, global.printer, global.ng.apolloLink.httpCommon, global.extractFiles));
}(this, function (exports, core, http, apolloLink, printer, apolloAngularLinkHttpCommon, extractFiles) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    // XXX find a better name for it
    var HttpLinkHandler = /** @class */ (function (_super) {
        __extends(HttpLinkHandler, _super);
        function HttpLinkHandler(httpClient, options) {
            var _this = _super.call(this) || this;
            _this.httpClient = httpClient;
            _this.options = options;
            _this.requester = function (operation) {
                return new apolloLink.Observable(function (observer) {
                    var context = operation.getContext();
                    // decides which value to pick, Context, Options or to just use the default
                    var pick = function (key, init) {
                        return apolloAngularLinkHttpCommon.prioritize(context[key], _this.options[key], init);
                    };
                    var includeQuery = pick('includeQuery', true);
                    var includeExtensions = pick('includeExtensions', false);
                    var method = pick('method', 'POST');
                    var url = pick('uri', 'graphql');
                    var withCredentials = pick('withCredentials');
                    var useMultipart = pick('useMultipart');
                    var req = {
                        method: method,
                        url: typeof url === 'function' ? url(operation) : url,
                        body: {
                            operationName: operation.operationName,
                            variables: operation.variables,
                        },
                        options: {
                            withCredentials: withCredentials,
                            useMultipart: useMultipart,
                            headers: _this.options.headers,
                        },
                    };
                    if (includeExtensions) {
                        req.body.extensions = operation.extensions;
                    }
                    if (includeQuery) {
                        req.body.query = printer.print(operation.query);
                    }
                    if (context.headers) {
                        req.options.headers = apolloAngularLinkHttpCommon.mergeHeaders(req.options.headers, context.headers);
                    }
                    var sub = apolloAngularLinkHttpCommon.fetch(req, _this.httpClient, extractFiles.extractFiles).subscribe({
                        next: function (response) {
                            operation.setContext({ response: response });
                            observer.next(response.body);
                        },
                        error: function (err) { return observer.error(err); },
                        complete: function () { return observer.complete(); },
                    });
                    return function () {
                        if (!sub.closed) {
                            sub.unsubscribe();
                        }
                    };
                });
            };
            return _this;
        }
        HttpLinkHandler.prototype.request = function (op) {
            return this.requester(op);
        };
        return HttpLinkHandler;
    }(apolloLink.ApolloLink));
    var HttpLink = /** @class */ (function () {
        function HttpLink(httpClient) {
            this.httpClient = httpClient;
        }
        HttpLink.prototype.create = function (options) {
            return new HttpLinkHandler(this.httpClient, options);
        };
        HttpLink = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], HttpLink);
        return HttpLink;
    }());

    var PROVIDERS = [HttpLink];
    var HttpLinkModule = /** @class */ (function () {
        function HttpLinkModule() {
        }
        HttpLinkModule = __decorate([
            core.NgModule({
                providers: PROVIDERS,
            })
        ], HttpLinkModule);
        return HttpLinkModule;
    }());

    exports.HttpLink = HttpLink;
    exports.HttpLinkHandler = HttpLinkHandler;
    exports.HttpLinkModule = HttpLinkModule;
    exports.PROVIDERS = PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng.apolloLink.http.umd.js.map
