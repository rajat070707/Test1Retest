import { ApolloError } from 'apollo-client';
const isApolloError = (err) => err && err.hasOwnProperty('graphQLErrors');
const ɵ0 = isApolloError;
export class TestOperation {
    constructor(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    flush(result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            this.observer.next(result);
            this.observer.complete();
        }
    }
    networkError(error) {
        const apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    }
    graphqlErrors(errors) {
        this.flush({
            errors,
        });
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYXBvbGxvLWFuZ3VsYXIvdGVzdGluZy8iLCJzb3VyY2VzIjpbIm9wZXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSzFDLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFzQixFQUFFLENBQ3JELEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDOztBQUU3QyxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUNTLFNBQW9CLEVBQ25CLFFBQStCO1FBRGhDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBdUI7SUFDdEMsQ0FBQztJQUVHLEtBQUssQ0FBQyxNQUFxQztRQUNoRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBcUIsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQVk7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUM7WUFDbEMsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sYUFBYSxDQUFDLE1BQXNCO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDVCxNQUFNO1NBQ1AsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcG9sbG9FcnJvcn0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQge09wZXJhdGlvbiwgRmV0Y2hSZXN1bHR9IGZyb20gJ2Fwb2xsby1saW5rJztcbmltcG9ydCB7R3JhcGhRTEVycm9yLCBFeGVjdXRpb25SZXN1bHR9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHtPYnNlcnZlcn0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IGlzQXBvbGxvRXJyb3IgPSAoZXJyOiBhbnkpOiBlcnIgaXMgQXBvbGxvRXJyb3IgPT5cbiAgZXJyICYmIGVyci5oYXNPd25Qcm9wZXJ0eSgnZ3JhcGhRTEVycm9ycycpO1xuXG5leHBvcnQgY2xhc3MgVGVzdE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBvcGVyYXRpb246IE9wZXJhdGlvbixcbiAgICBwcml2YXRlIG9ic2VydmVyOiBPYnNlcnZlcjxGZXRjaFJlc3VsdD4sXG4gICkge31cblxuICBwdWJsaWMgZmx1c2gocmVzdWx0OiBFeGVjdXRpb25SZXN1bHQgfCBBcG9sbG9FcnJvcik6IHZvaWQge1xuICAgIGlmIChpc0Fwb2xsb0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZXJyb3IocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vYnNlcnZlci5uZXh0KHJlc3VsdCBhcyBGZXRjaFJlc3VsdCk7XG4gICAgICB0aGlzLm9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5ldHdvcmtFcnJvcihlcnJvcjogRXJyb3IpOiB2b2lkIHtcbiAgICBjb25zdCBhcG9sbG9FcnJvciA9IG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICBuZXR3b3JrRXJyb3I6IGVycm9yLFxuICAgIH0pO1xuXG4gICAgdGhpcy5mbHVzaChhcG9sbG9FcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ3JhcGhxbEVycm9ycyhlcnJvcnM6IEdyYXBoUUxFcnJvcltdKTogdm9pZCB7XG4gICAgdGhpcy5mbHVzaCh7XG4gICAgICBlcnJvcnMsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==